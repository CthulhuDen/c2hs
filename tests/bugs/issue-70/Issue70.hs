-- GENERATED by C->Haskell Compiler, version 0.18.2 The shapeless maps, 31 Oct 2014 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Issue70.chs" #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
module Foo where



class Flux a where
  data FluxCode a
  gigawattsNeeded :: a -> Double
  gigawattsNeeded _ = 1.21

data Capacitor = Capacitor Int

instance Flux Capacitor where
  -- associated data type decl
  data FluxCode Capacitor = Bar | Baz | Qux | Xyzzy

-- Note: must be able to define longer names here, I've used single quotes.
-- underscoreToCase still works, it aliases the C identifiers for the instance.
-- XYZZY_THUD is manually aliased.
-- nocode suppresses emitting a data declaration.

instance Enum (FluxCode Capacitor) where
  succ Bar = Baz
  succ Baz = Qux
  succ Qux = Xyzzy
  succ Xyzzy = error "FluxCode Capacitor.succ: Xyzzy has no successor"

  pred Baz = Bar
  pred Qux = Baz
  pred Xyzzy = Qux
  pred Bar = error "FluxCode Capacitor.pred: Bar has no predecessor"

  enumFromTo from to = go from
    where
      end = fromEnum to
      go v = case compare (fromEnum v) end of
                 LT -> v : go (succ v)
                 EQ -> [v]
                 GT -> []

  enumFrom from = enumFromTo from Xyzzy

  fromEnum Bar = 0
  fromEnum Baz = 1
  fromEnum Qux = 5
  fromEnum Xyzzy = 6

  toEnum 0 = Bar
  toEnum 1 = Baz
  toEnum 5 = Qux
  toEnum 6 = Xyzzy
  toEnum unmatched = error ("FluxCode Capacitor.toEnum: Cannot match " ++ show unmatched)

{-# LINE 23 "Issue70.chs" #-}

