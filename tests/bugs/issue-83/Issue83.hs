-- GENERATED by C->Haskell Compiler, version 0.20.1 The shapeless maps, 31 Oct 2014 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Issue83.chs" #-}
module Main where

import Control.Monad
import Foreign.Ptr
import Foreign.C.String
import Foreign.C.Types





-- This is for testing marshalling of C... types, e.g. CInt, etc.
strcmp :: (CString) -> (CString) -> IO ((CInt))
strcmp a1 a2 =
  (flip ($)) a1 $ \a1' -> 
  (flip ($)) a2 $ \a2' -> 
  strcmp'_ a1' a2' >>= \res ->
  let {res' = fromIntegral res} in
  return (res')

{-# LINE 13 "Issue83.chs" #-}

setenv :: (String) -> (String) -> (Int) -> IO ((Int))
setenv a1 a2 a3 =
  withCString a1 $ \a1' -> 
  withCString a2 $ \a2' -> 
  let {a3' = fromIntegral a3} in 
  setenv'_ a1' a2' a3' >>= \res ->
  let {res' = fromIntegral res} in
  return (res')

{-# LINE 14 "Issue83.chs" #-}

getenv :: (String) -> IO ((CString))
getenv a1 =
  withCString a1 $ \a1' -> 
  getenv'_ a1' >>= \res ->
  return res >>= \res' ->
  return (res')

{-# LINE 15 "Issue83.chs" #-}

hsin :: (Double) -> IO ((Double))
hsin a1 =
  let {a1' = realToFrac a1} in 
  hsin'_ a1' >>= \res ->
  let {res' = realToFrac res} in
  return (res')

{-# LINE 16 "Issue83.chs" #-}

csin :: (CDouble) -> IO ((CDouble))
csin a1 =
  let {a1' = realToFrac a1} in 
  csin'_ a1' >>= \res ->
  let {res' = realToFrac res} in
  return (res')

{-# LINE 17 "Issue83.chs" #-}


main :: IO ()
main = do
  let s1 = "abc" ; s2 = "def" ; s3 = "def"
  res1 <- withCString s1 $ \cs1 ->
    withCString s2 $ \cs2 -> strcmp cs1 cs2
  res2 <- withCString s2 $ \cs2 ->
    withCString s3 $ \cs3 -> strcmp cs2 cs3
  print (res1, res2)
  void $ setenv "TEST_VAR" "TEST_VAL" 1
  h <- getenv "TEST_VAR"
  peekCString h >>= putStrLn
  cx <- csin 1.0
  print (round (10000 * cx) :: Integer)
  hx <- hsin 1.0
  print (round (10000 * hx) :: Integer)

foreign import ccall safe "Issue83.chs.h strcmp"
  strcmp'_ :: ((Ptr CChar) -> ((Ptr CChar) -> (IO CInt)))

foreign import ccall safe "Issue83.chs.h setenv"
  setenv'_ :: ((Ptr CChar) -> ((Ptr CChar) -> (CInt -> (IO CInt))))

foreign import ccall safe "Issue83.chs.h getenv"
  getenv'_ :: ((Ptr CChar) -> (IO (Ptr CChar)))

foreign import ccall safe "Issue83.chs.h sin"
  hsin'_ :: (CDouble -> (IO CDouble))

foreign import ccall safe "Issue83.chs.h sin"
  csin'_ :: (CDouble -> (IO CDouble))
